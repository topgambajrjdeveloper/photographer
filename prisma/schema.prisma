// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  name      String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  coverImage  String?
  featured    Boolean   @default(false)
  order       Int       @default(0)
  galleries   Gallery[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  featured    Boolean  @default(false)
  published   Boolean  @default(true)
  order       Int      @default(0)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images      Image[]
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("galleries")
}

model Image {
  id          String   @id @default(cuid())
  url         String
  publicId    String?  // ID p√∫blico de Cloudinary
  alt         String?
  title       String?
  description String?
  width       Int?
  height      Int?
  size        Int?
  format      String?
  featured    Boolean  @default(false)
  order       Int      @default(0)
  galleryId   String
  gallery     Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("images")
}

model Contact {
  id        String      @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("contacts")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

enum Role {
  ADMIN
  USER
}

enum ContactStatus {
  PENDING
  READ
  REPLIED
  ARCHIVED
}
